/*
Write a static method that takes as input an int array and returns a 2-dimensional int array.

   public static int[][] split(int[] array)

The 2-dim array should have three rows.

The first row should contain the zero integers from the input array.

The second row should contain the negative integers from the input array.

The third row should contain the positive integers from the input array.

The entries in each row should be in the same order that they were in in the input array.

Any one of the three rows could be an empty array (even all three of them).

Use an enhanced for-loop whenever possible.
*/
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;

public class Main
{
   /**
      The 2-dim return array array should have three rows.

      The first row should contain the zero integers from the input array.
      The second row should contain the negative integers from the input array.
      The third row should contain the positive integers from the input array.

      The entries in each row should be in the same order that they were in in the input array,

      Any one of the three rows could be an empty array (even all three of them).

      Use an enhanced for-loop whenever possible.
   */
   public static int[][] split(int[] array)
   {
      // This is just the "array of rows". You still need
      // to create the three rows (after you know how big
      // each row needs to be).
      
      ArrayList<Integer> temp1 = new ArrayList<>();
      ArrayList<Integer> temp2 = new ArrayList<>();
      ArrayList<Integer> temp3 = new ArrayList<>();
    
    for (int number : array) {
         if (number == 0) {
            temp1.add(number);
         } else if (number < 0) {
            temp2.add(number);
         } else {
            temp3.add(number);
         }
      }
      int[][] result = new int[3][];
      result[0] = temp1.stream().mapToInt(i -> i).toArray();
      result[1] = temp2.stream().mapToInt(i -> i).toArray();
      result[2] = temp3.stream().mapToInt(i -> i).toArray();

      return result;
   }
   



   // Do not modify this main method.
   public static void main(String[] args)
   {
      final Scanner in = new Scanner(System.in);

      final int size = in.nextInt();
      final int[] array = new int[size];
      for (int i = 0; i < array.length; ++i)
      {
         array[i] = in.nextInt();
      }
      System.out.println(Arrays.toString(array));
      System.out.println();

      final int[][] splitArray = split(array);
      System.out.println(Arrays.deepToString(splitArray));
   }
}
